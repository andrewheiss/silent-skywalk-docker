---
title: "Why Donors Donate replication code"
toc: true
format: 
  typst: default
  html: default
  gfm: default
---

---

## Overview

We use the [{renv} package](https://rstudio.github.io/renv/articles/renv.html) to create a stable version-specific library of R packages, and we use the [{targets} package](https://docs.ropensci.org/targets/index.html) to manage all the file dependencies and run the analysis. {targets} is especially helpful with long-running objects like the main model, which takes 20–30 minutes to run—as long as upstream dependencies don't change, the model only needs to run once, and can be loaded from {targets}'s data store thereafter.

Because it can sometimes be difficult to set up and configure version-specific libraries of R packages and install specific versions of Stan, we provide two methods for replicating our analysis: (1) a Docker container built and orchestrated with Docker Compose, or (2) restoring a {renv} environment on your local computer.

The data for the analysis is accessible in `why-donors-donate/data/raw_data`. The {targets} pipeline cleans this data and creates an object named `data_full`—load it into an R session with `targets::tar_load(data_full)`.

The complete {targets} pipeline generates two output artifacts:

- **Manuscript**: An HTML version of the manuscript and appendix, located at `why-donors-donate/manuscript/output/manuscript.html` (or at `http://localhost:8888/notebook/manuscript.html` if you run the pipeline with Docker Compose).
- **Analysis notebook**: A static website containing more complete details about the survey, experiment design, preregistration, statistical methods and other information, located at `why-donors-donate/_site` (or at `http://localhost:8888` if yo run the pipeline with Docker Compose).

```{=typst}
#pagebreak()
```

## Method 1: Docker Compose (recommended)

The entire analysis can be run in a Docker container based on R 4.3.3, with all packages locked at specific versions defined in `why-donors-donate/renv.lock`.

Here's how to do this:

1. Install Docker Desktop on your computer (instructions for [macOS](https://docs.docker.com/desktop/install/mac-install/) or [Windows](https://docs.docker.com/desktop/install/windows-install/)).

2. Make sure Docker is running.

3. In the Docker Desktop settings, make sure you allocate at least 8 CPUs and 16 GB of RAM.

   ![Docker Desktop resource settings](img/docker-resources.png){width=90%}

4. Build the analysis with Docker Compose. There are two general approaches:

   - **Using Visual Studio Code *(recommended)***: If you [download Visual Studio Code](https://code.visualstudio.com/) and [its Docker extension](https://code.visualstudio.com/docs/containers/overview), you can right click on the `docker-compose.yml` file in the File Explorer sidebar and select "Compose Up".
     
     ![Docker Compose contextual menu in the Visual Studio Code sidebar](img/docker-compose-sidebar.png){width=60%}

   - **Using the terminal**: Using a terminal, navigate to this replication code directory and run this:

     ```sh
     docker compose -f docker-compose.yml up
     ```

5. Wait. It takes 20–30 minutes to build the {renv} library (but only the first time you run this; subsequent runs of `docker compose` should be instant), and it takes about 30–40 minutes to run the analysis (but only the first time; subsequent runs of `targets::tar_make()` should be instant).

   ::: {.callout-important}
   ### Monitoring the pipeline progress

   Depending on how you run `docker compose`, you might not see the progress of the {targets} pipeline. If you run it from the terminal, you should; if you run it from Visual Studio Code, you won't. You can see the logs of the pipeline from the Docker Desktop app in the container details, or by running `docker logs` from the terminal.
   
   ![Docker Desktop logs](img/docker-logs.png){width=90%}
   :::

6. When the pipeline is all the way done, visit `http://localhost:8888` to see the analysis notebook and finished manuscript (at `http://localhost:8888/notebook/manuscript.html`). 

   You can also see these outputs on your computer: the analysis notebook is at `why-donors-donate/_site` and the manuscript is at `why-donors-donate/manuscript/output/manuscript.html`.

7. Additionally, you can explore the data and analysis in an RStudio session in your browser if you visit `http://localhost:8787`. Any edits you make here will also be reflected on your local computer.

```{=typst}
#pagebreak()
```

## Method 2: {renv} locally

It's also possible to not use Docker and instead run everything locally.

1. Open `why-donors-donate/why-donors-donate.Rproj` to open a new RStudio project.

2. Run `renv::restore()` to install all the packages.

3. Run `cmdstanr::install_cmdstan()` to install [CmdStan](https://mc-stan.org/users/interfaces/cmdstan).

4. Download and install the [Libre Franklin font](https://fonts.google.com/specimen/Libre+Franklin).

5. Run `targets::tar_make()` to run the full analysis pipeline. This will take 30–40 minutes the first time.

6. When the pipeline is all the way done, find the analysis notebook at `why-donors-donate/_site` and the manuscript at `why-donors-donate/manuscript/output/manuscript.html`.
